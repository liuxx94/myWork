
Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

===============solution=================

java£º
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null || head.next == null || head.next.next == null)
            return false;
        else if(head.next.next == head){
            return true;
        }
        ListNode low = head, fast = head;
        while(fast.next != null && fast.next.next != null){
            low = low.next;
            fast = fast.next.next;
            if(low.val == fast.val)
                return true;
            else
                continue;
        }
        return false;
    }
}