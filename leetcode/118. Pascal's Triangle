
Given numRows, generate the first numRows of Pascal's triangle.

For example, given numRows = 5,
Return

[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]

杨辉三角

================solution================

java：

public class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<List<Integer>>(); 
        if(numRows == 0)
            return result;
        if(numRows == 1){
            List<Integer> list = new ArrayList<Integer>();
            list.add(1);
            result.add(list);
            return result;
        }
        if(numRows == 2){
            List<Integer> list = new ArrayList<Integer>();
            list.add(1);
            //System.out.println(list.size());
            result.add(list);
            list=null;
            List<Integer> list1 = new ArrayList<Integer>();
            list1.add(1);
            list1.add(1);
            result.add(list1);
            list1 = null;
            return result;
        }
        else{ 
            List<Integer>[] list = new ArrayList[numRows];
            for(int row = 0; row < numRows; row ++){
                if(row == 0){
                    list[row] = new ArrayList<Integer>();//需初始化 否则空指针异常
                    list[row].add(1);
                    result.add(list[row]);
                    list[row]=null;
                }
                else if(row == 1){
                    list[row] = new ArrayList<Integer>();
                    list[row].add(1);
                    list[row].add(1);
                    result.add(list[row]);
                }
                else{
                    list[row] = new ArrayList<Integer>();
                    for(int i = 0; i < list[row-1].size(); i ++){
                        if(i == 0)
                            list[row].add(1);
                        else{
                            list[row].add(list[row-1].get(i) + list[row-1].get(i-1));
                        }
                    }
                    list[row].add(1);
                    result.add(list[row]);
                }
                
            }
            return result;
        }
    }
}