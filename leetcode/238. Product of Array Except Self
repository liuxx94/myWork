Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)

===================solution======================

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int count0 = 0, i, sz = nums.size(), mul = 1;
        for(i = 0; i < sz; i ++){
            if(nums[i] == 0)
                count0 ++;
            else 
                mul *= nums[i];
        }
        if(count0 >= 2){
            vector<int> result(sz, 0);
            return result;
        }
        else if(count0 == 1){
            vector<int> result;
            for(i = 0; i < sz; i ++){
                if(nums[i] == 0){
                    result.push_back(mul);
                }
                else
                    result.push_back(0);
                    
            }
            return result;
        }
        else{
            vector<int> result;
            for(i = 0; i < sz; i ++)
                result.push_back(mul / nums[i]);
            return result;
        }
           
    }
};